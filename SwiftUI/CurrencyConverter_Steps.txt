// create struct

struct Currency: Identifiable,Hashable {
    let id = UUID()
    let name: String
    let symbol: String
    let conversionRate: Double
}

// initial data

let currencies = [
    Currency(name: "US Dollar", symbol: "USD", conversionRate: 1.0),
    Currency(name: "Euro", symbol: "EUR", conversionRate: 0.84),
    Currency(name: "British Pound", symbol: "GBP", conversionRate: 0.72),
    Currency(name: "Japanese Yen", symbol: "JPY", conversionRate: 109.51),
]

// variables

@State private var amount: String = ""
@State private var selectedFromCurrency = currencies[0]
@State private var selectedToCurrency = currencies[1]

// computed property

    private var convertedAmount: Double {
        guard let amountDouble = Double(amount) else { return 0 }
        let inUSD = amountDouble / selectedFromCurrency.conversionRate
        return inUSD * selectedToCurrency.conversionRate
    }
    

// section 1

             Section(header: Text("Amount to convert")) {
                        TextField("Amount", text: $amount)
                            .keyboardType(.decimalPad)
                    }

// section 2

                    Section(header: Text("From")) {
                        Picker("From", selection: $selectedFromCurrency) {
                            ForEach(currencies) { currency in
                                Text(currency.name).tag(currency)
                            }
                        }
                    }

// section 3

         Section(header: Text("To")) {
                        Picker("To", selection: $selectedToCurrency) {
                            ForEach(currencies) { currency in
                                Text(currency.name).tag(currency)
                            }
                        }
                    }

// section 4

         Section(header: Text("Converted Amount")) {
                        Text("\(convertedAmount, specifier: "%.2f") \(selectedToCurrency.symbol)")
                            .font(.largeTitle)
                            .foregroundColor(.green)
                    }

// 

             Button(action: {
                        let temp = selectedFromCurrency
                        selectedFromCurrency = selectedToCurrency
                        selectedToCurrency = temp
                    }) {
                        HStack {
                            Image(systemName: "arrow.left.arrow.right")
                            Text("Swap Currencies")
                        }
                    }


**********************7th October 2024************

Step 1 - Update ExchangeRateService 

let SERVICE_URL = "https://open.er-api.com/v6/latest/USD"

// Predefined list of currencies we want to support
let supportedCurrencies = [
    "USD": "US Dollar",
    "EUR": "Euro",
    "GBP": "British Pound",
    "JPY": "Japanese Yen"
]

Step 2 - Add Struct for JSON Response handling 

struct ExchangeRatesResponse: Codable {
    let rates: [String: Double]
}


Step 3 - Add fetch Rates

func fetchRates() async throws -> [Currency] {
    let session = URLSession.shared
    
    guard let url = URL(string: SERVICE_URL) else {
        throw URLError(.badURL)
    }
    
    let request = URLRequest(url:url)
    
    let (data, _) = try await session.data(for: request)
    
    return try parseJSON(data: data)
}

Step 4 - Add Parse JSON

private func parseJSON(data: Data) throws -> [Currency] {
    let decoder = JSONDecoder()
    let result = try decoder.decode(ExchangeRatesResponse.self, from: data)
    
    return supportedCurrencies.compactMap { (symbol, name) in
        guard let rate = result.rates[symbol] else { return nil }
        return Currency(name: name, symbol: symbol, conversionRate: rate)
    }
}

Step 5 - Update CurrencyViewModel with fetchCurrencies

func fetchCurrencies() async {
    do {
        currencies = try await ExchangeRateService.shared.fetchRates()
        selectedFromCurrency = currencies.first { $0.symbol == selectedFromCurrency.symbol } ?? currencies[0]
        selectedToCurrency = currencies.first { $0.symbol == selectedToCurrency.symbol } ?? currencies[1]
    } catch {
        print("Error fetching rates: \(error.localizedDescription)")
    }
}


