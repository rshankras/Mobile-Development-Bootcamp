// step 1 - Add Form control in JournalEntryView

Form {
    Section(header: Text("Title")) {
        TextField("Enter title", text: $title)
    }

    Section(header: Text("Date")) {
        DatePicker("Entry Date", selection: $date, displayedComponents: .date)
    }

    Section(header: Text("Content")) {
        TextEditor(text: $content)
            .frame(minHeight: 200)
    }
}

// step 2 - Add Toolbar

   .toolbar {
            ToolbarItem(placement: .navigationBarTrailing) {
                Button("Save") {
                    //
                    dismiss()
                }
            }
        }

// step 3 - Add all the state variables and initialzer in JournalEntryView

    
    @StateObject var entry: JournalEntry
    
    @State private var title: String
    @State private var content: String
    @State private var date: Date
    
    init(entity: JournalEntry) {
        self.title = entity.title ?? ""
        self.content = entity.content ?? ""
        self.date = entity.date ?? Date()
        _entry = StateObject(wrappedValue: entity)
    }
    
// step 4 - dismiss action

   @Environment (\.dismiss) private var dismiss

// Step 5 - create groups for Views and ViewModels

// step 6 - create JournalViewModel

class JournalViewModel: ObservableObject {
        @Published var entries: [JournalEntry] = []
}

// step 7 - add viewContext and initializers

    private var viewContext: NSManagedObjectContext

    init(viewContext: NSManagedObjectContext) {
        self.viewContext = viewContext
        fetchEntries()
    }

// step 8 - addEntry

  func addEntry(title: String, content: String) {
        let newEntry = JournalEntry(context: viewContext)
        newEntry.title = title
        newEntry.content = content
        newEntry.date = Date()
        saveContext()
    }

    // step 9 - Add saveContext

    private func saveContext() {
        do {
            try viewContext.save()
            fetchEntries()
        } catch {
            print("Error saving context: \(error)")
        }
    }

// step 10 - Update ContentView, AddJournalView to use ViewModel

    @ObservedObject var entries: JournalViewModel

// step 11 - Then add Swipe actions in ContentView

    .swipeActions(edge: .trailing, allowsFullSwipe: true) {
                    Button(role: .destructive) {
                        deleteEntry(entry: entry)
                    } label: {
                        Label("Delete", systemImage: "trash")
                    }
                }

        func deleteEntry(entry: JournalEntry) {
        viewModel.deleteEntry(entry)
    }

// step 12 - Then add deleteEntry, updateEntry 

   func updateEntry(_ entry: JournalEntry, title: String, content: String) {
        entry.title = title
        entry.content = content
        entry.date = Date()
        saveContext()
    }
    
    func deleteEntry(_ entry: JournalEntry) {
        viewContext.delete(entry)
        saveContext()
    }

**************** MVVM *************

1. rename ContentView to JournalListView 

2. Add New File ContenView and SettingsView

3. In ContentView add tabbar bar

        TabView {
            JournalListView(viewModel: journalViewModel)
                .tabItem {
                    Label("Journal", systemImage: "book.fill")
                }
            
            SettingsView()
                .tabItem {
                    Label("Settings", systemImage: "gear")
                }
        }

4. Create NotificaitonManager class

class NotificationManager {
    
    static let shared = NotificationManager()
    
    func requestAuthorization() {
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { granted, error in
            if granted {
                print("Notification authorization granted")
            } else if let error = error {
                print("Error requesting notification authorization: \(error.localizedDescription)")
            }
        }
    }
}

5 Add other notificationmanager class methods

  func scheduleDaily(at time: Date, title: String, body: String) {
        let content = UNMutableNotificationContent()
        content.title = title
        content.body = body
        content.sound = .default
        
        let calendar = Calendar.current
        let components = calendar.dateComponents([.hour, .minute], from: time)
        let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: true)
        
        let request = UNNotificationRequest(identifier: "dailyReminder", content: content, trigger: trigger)
        
        UNUserNotificationCenter.current().add(request) { error in
            if let error = error {
                print("Error scheduling notification: \(error.localizedDescription)")
            }
        }
    }

    func cancelAllNotifications() {
        UNUserNotificationCenter.current().removeAllPendingNotificationRequests()
    }

6 Add SettingsViewModel

class  SettingsViewModel: ObservableObject {
    
    @Published var isDarkModeEnabled: Bool {
        didSet {
            UserDefaults.standard.set(isDarkModeEnabled, forKey: "isDarkModeEnabled")
        }
    }
    
    @Published var reminderTime: Date {
        didSet {
            UserDefaults.standard.set(reminderTime, forKey: "reminderTime")
            scheduleReminder()
        }
    }
    
    @Published var isReminderEnabled: Bool {
        didSet {
            UserDefaults.standard.set(isReminderEnabled, forKey: "isReminderEnabled")
            if isReminderEnabled {
                scheduleReminder()
            } else {
                NotificationManager.shared.cancelAllNotifications()
            }
        }
    }
    
    init() {
        self.isDarkModeEnabled = UserDefaults.standard.bool(forKey: "isDarkModeEnabled")
        self.reminderTime = UserDefaults.standard.object(forKey: "reminderTime") as? Date ?? Date()
        self.isReminderEnabled = UserDefaults.standard.bool(forKey: "isReminderEnabled")
        
        NotificationManager.shared.requestAuthorization()
    }
    
    private func scheduleReminder() {
        guard isReminderEnabled else { return }
        NotificationManager.shared.scheduleDaily(at: reminderTime, title: "Journal Reminder", body: "It's time to write in your journal!")
    }
}

7 Settings View 

struct SettingsView: View {
    
    @ObservedObject var viewModel: SettingsViewModel
    
    var appVersion: String {
        if let version = Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String {
            return "v\(version)"
        }
        return "Version Unknown"
    }

    
    var body: some View {
        Form {
            Section(header: Text("Appearance")) {
                Toggle("Dark Mode", isOn: $viewModel.isDarkModeEnabled)
            }
            
            Section(header: Text("Notifications")) {
                Toggle("Enable Daily Reminder", isOn: $viewModel.isReminderEnabled)
                if viewModel.isReminderEnabled {
                    DatePicker("Reminder Time", selection: $viewModel.reminderTime, displayedComponents: .hourAndMinute)
                }
            }
            
            Section(header: Text("About")) {
                HStack {
                    Text("App Version")
                    Spacer()
                    Text(appVersion)
                        .foregroundColor(.secondary)
                }
            }
        }
        .navigationTitle("Settings")
    }
}

#Preview {
    SettingsView(viewModel: SettingsViewModel())
}

8 Content View


struct ContentView: View {
    @StateObject var settingsViewModel = SettingsViewModel()
    @StateObject var journalViewModel: JournalViewModel
    var body: some View {
        TabView {
            JournalListView(viewModel: journalViewModel)
                .tabItem {
                    Label("Journal", systemImage: "book.fill")
                }
            
            SettingsView(viewModel: SettingsViewModel())
                .tabItem {
                    Label("Settings", systemImage: "gear")
                }
        }
        .preferredColorScheme(settingsViewModel.isDarkModeEnabled ? .dark : .light)
            .accentColor(.blue)
    }
}
